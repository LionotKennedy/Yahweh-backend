
// exports.forgotPassword = async (req, res) => {
//     try {
//         const {
//             email
//         } = req.body;
//         const user = await User.findByEmail(email);

//         if (!user) {
//             return res.status(404).json({
//                 message: 'Aucun utilisateur avec cet email'
//             });
//         }

//         const resetToken = jwt.sign({
//             id: user.id
//         }, process.env.JWT_SECRET, {
//             expiresIn: '1h'
//         });
//         await Token.createResetToken(user.id, resetToken);

//         // Envoyer l'email de réinitialisation
//         await emailService.sendResetPasswordEmail(user.email, resetToken);

//         res.json({
//             message: 'Un email de réinitialisation a été envoyé'
//         });
//     } catch (error) {
//         res.status(500).json({
//             message: error.message
//         });
//     }
// };

// exports.resetPassword = async (req, res) => {
//     try {
//         const {
//             token,
//             newPassword
//         } = req.body;
//         const tokenRecord = await Token.findResetToken(token);

//         if (!tokenRecord) {
//             return res.status(400).json({
//                 message: 'Token invalide ou expiré'
//             });
//         }

//         const decoded = jwt.verify(token, process.env.JWT_SECRET);
//         await User.updatePassword(decoded.id, newPassword);
//         await Token.deleteResetToken(token);

//         res.json({
//             message: 'Mot de passe mis à jour avec succès'
//         });
//     } catch (error) {
//         res.status(500).json({
//             message: error.message
//         });
//     }
// };



// ... (les autres imports restent les mêmes)





























// exports.logout = async (req, res) => {
//     try {
//         const token = req.header('Authorization')?.replace('Bearer ', '');
        
//         // Option 1: Ajouter le token à une blacklist
//         await Token.blacklistToken(token);
        
//         // Option 2: Vider le token côté client
//         res.setHeader('Clear-Site-Data', '"cookies", "storage"');
        
//         res.json({
//             message: 'Déconnexion réussie'
//         });
//     } catch (error) {
//         res.status(500).json({
//             message: error.message
//         });
//     }
// };

// exports.logout = async (req, res) => {
//     // Dans une implémentation plus avancée, vous pourriez invalider le token
//     res.json({
//         message: 'Déconnexion réussie'
//     });
// };